name: fallback restore with gzip

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    name: runner-cache upload (${{ matrix.os }})
    steps:
    - uses: actions/checkout@v3
    - name: Create file to cache
      shell: bash
      run: |
        mkdir test-cache
        echo "foo" > test-cache/test.txt
    - uses: actions/cache@v3
      with:
        path: test-cache
        key: ${{ matrix.os }}-runner-${{ github.run_number }}-${{ github.run_attempt }}

  restore:
    needs: upload
    strategy:
      matrix:
        os: [windows-latest]
        key: [windows-latest]
    runs-on: ${{ matrix.os }}
    name: runner-cache restore (${{ matrix.os }}) with key (${{ matrix.key }})
    steps:
    - uses: actions/checkout@v3
      with:
        repository: actions/toolkit
        ref: phantsure/cache-testing
    
    - name: Set Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    # In order to save & restore cache from a shell script, certain env variables need to be set that are only available in the
    # node context. This runs a local action that gets and sets the necessary env variables that are needed
    - name: Set env variables
      uses: ./packages/cache/__tests__/__fixtures__/

    # Need root node_modules because certain npm packages like jest are configured for the entire repository and it won't be possible
    # without these to just compile the cache package
    - name: Install root npm packages
      run: npm ci

    - name: Compile cache package
      run: |
        npm ci
        npm run tsc
      working-directory: packages/cache

    - name: Restore cache using restoreCache() with http-client
      run: |
        node -e "Promise.resolve(require('./packages/cache/lib/cache').restoreCache(['test-cache','~/test-cache'],'${{ matrix.os }}-runner-${{ github.run_number }}-${{ github.run_attempt }}',[],{useAzureSdk: false}))"

    - name: Output cache content
      run: |
        cat test-cache/test.txt
    - name: Check cache contents
      shell: bash
      run: if [ $(cat test-cache/test.txt) == "foo" ]; then echo "Cache contents verified."; exit 0; else echo "Cache invalid"; exit 1; fi
