# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  windows_bsdtar:
    runs-on: windows-latest

    steps:
    - name: Create multiple files
      run: |
        $ErrorActionPreference = 'SilentlyContinue'
        echo "Create random files"
        mkdir cache
        for($i = 1 ; $i -le 500 ; $i++) { dd if=/dev/urandom bs=1048576 count=1 of=cache/file$i }
        
    - name: Test with tar only
      run: |
        $ErrorActionPreference = 'SilentlyContinue'
        zstd -V
        tar --version
        echo "Running tar standalone"
        (Measure-Command { tar -cf file.tar cache | Out-Default }).ToString()
        ls file.tar
        rm file.tar
    
    - name: Test with tar then zstd
      run: |
        echo "Running tar + zstd in two steps"
        (Measure-Command { tar -cf file_combined.tar cache | Out-Default }).ToString()
        (Measure-Command { zstd -o file_combined.tzst file_combined.tar | Out-Default }).ToString()
        ls file_combined.tzst
        rm file_combined.tzst
        
    - name: Test with tar with zstd
      run: |
        echo "Running tar + zstd using --use-compress-program"
        #(Measure-Command { tar --use-compress-program zstd -cf file.tzst -P cache | Out-Default }).ToString()
        #ls file.tzst
        echo "Done"
  
  windows_gnutar:
    runs-on: windows-latest

    steps:
    - name: Create multiple files
      run: |
        $ErrorActionPreference = 'SilentlyContinue'
        echo "Create random files"
        mkdir cache
        for($i = 1 ; $i -le 500 ; $i++) { dd if=/dev/urandom bs=1048576 count=1 of=cache/file$i }

    - if: ${{ runner.os == 'Windows' }}
      name: Use GNU tar
      shell: cmd
      run: |
        echo "Adding GNU tar to PATH"
        echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

    - name: Test with tar only
      run: |
        zstd -V
        tar --version
        $ErrorActionPreference = 'SilentlyContinue'
        echo "Running tar standalone"
        (Measure-Command { tar -cf file_gnu.tar cache | Out-Default }).ToString()
        ls file_gnu.tar
        rm file_gnu.tar
    
    - name: Test with tar then zstd
      run: |
        echo "Running tar + zstd in two steps"
        (Measure-Command { tar -cf file_combined_gnu.tar cache | Out-Default }).ToString()
        (Measure-Command { zstd -o file_combined_gnu.tzst file_combined_gnu.tar | Out-Default }).ToString()
        ls file_combined_gnu.tzst
        rm file_combined_gnu.tzst
        
    - name: Test with tar with zstd
      run: |
        echo "Running tar + zstd using --use-compress-program"
        (Measure-Command { tar --use-compress-program zstd -cf file_gnu.tzst -P cache | Out-Default }).ToString()
        ls file_gnu.tzst
        rm file_gnu.tzst
        echo "Done"
  
  linux_tar:
    runs-on: ubuntu-latest

    steps:
    - name: Create multiple files
      run: |
        echo "Create random files"
        mkdir cache
        for i in {1..500}; do  dd if=/dev/urandom bs=1048576 count=1 of=cache/file$i; done

    - name: Test with tar only
      run: |
        zstd -V
        tar --version
        echo "Running tar standalone"
        time tar -cf file_gnu.tar cache
        ls file_gnu.tar
        rm file_gnu.tar
    
    - name: Test with tar then zstd
      run: |
        echo "Running tar + zstd in two steps"
        time tar -cf file_combined_gnu.tar cache
        time zstd -o file_combined_gnu.tzst file_combined_gnu.tar
        ls file_combined_gnu.tzst
        rm file_combined_gnu.tzst
        
    - name: Test with tar with zstd
      run: |
        echo "Running tar + zstd using --use-compress-program"
        time tar --use-compress-program zstd -cf file_gnu.tzst -P cache
        ls file_gnu.tzst
        rm file_gnu.tzst
        echo "Done"
